# https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.Certificate
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: my-test-certificate
spec:
  secretName: my-test-certificate-secret
  issuerRef:
    kind: ClusterIssuer
    name: acme2dfn-issuer

  commonName: "test-cert.pfisterer.user.edsc.cloud"
  dnsNames:
    - "test-cert.pfisterer.user.edsc.cloud"
  subject:
    organizations:
      - "My Test Organization"
    countries:
      - "DE"
    organizationalUnits:
      - "DHBW Mannheim"
    provinces:
      - "Baden-Wuerttemberg"
    localities:
      - "Mannheim"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: acme2dfn-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "acme2file-test"
  template:
    metadata:
      labels:
        app: "acme2file-test"
    spec:
      containers:
        - name: blabla
          image: nginx

---
apiVersion: v1
kind: Service
metadata:
  name: acme2file-service-test
  namespace: "cert-manager"
spec:
  selector:
    app: "acme2file-test"
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: www

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-cert-ingress
  namespace: "cert-manager"
  annotations:
    external-dns.alpha.kubernetes.io/hostname: test-cert.pfisterer.user.edsc.cloud
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: acme2dfn-issuer
#    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  rules:
    - host: test-cert.pfisterer.user.edsc.cloud
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: acme2file-service-test
                port:
                  number: 80
  tls: # < placing a host in the TLS config will indicate a certificate should be created
    - hosts:
        - test-cert.pfisterer.user.edsc.cloud
      secretName: myingress-cert # < cert-manager will store the created certificate in this secret.
